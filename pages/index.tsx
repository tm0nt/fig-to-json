import type { NextPage } from "next"
import Head from "next/head"
import { Box, Button, Container, Grid, Text, Title, useMantineColorScheme } from "@mantine/core"
import { FileUpload } from "../components/FileUpload"
import dynamic from "next/dynamic"
import { useState } from "react"
import { figToJson, jsonToFig } from "../lib/fig2json"

const ReactJson = dynamic(() => import("react-json-view"), {
  ssr: false
})

function downloadJSON(json: any, fileName: string) {
  const dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(json))
  download(dataStr, `${fileName}.json`)
}

// function to download binary Uint8array
function downloadFigma(data: Uint8Array, fileName: string) {
  const b64encoded = btoa(String.fromCharCode(...data))
  const dataStr = "data:application/x-figma;base64," + b64encoded
  download(dataStr, `${fileName.replace(".fig.json", "")}.fig`)
}

function download(dataStr: string, fileName: string) {
  const downloadAnchorNode = document.createElement("a")
  downloadAnchorNode.setAttribute("href", dataStr)
  downloadAnchorNode.setAttribute("download", fileName)
  document.body.appendChild(downloadAnchorNode)
  downloadAnchorNode.click()
  downloadAnchorNode.remove()
}

const Home: NextPage = () => {
  const [json, setJson] = useState<object | null>(null)
  const [fileName, setFileName] = useState<string | null>(null)
  const { colorScheme } = useMantineColorScheme()

  function handleDownloadJSON() {
    downloadJSON(json, fileName || "figma2json.fig.json")
  }

  async function handleExportFig() {
    const data = await jsonToFig(json)
    downloadFigma(data, fileName || "figma2json.fig")
  }

  return (
    <Container>
      <Head>
        <title>Figma para JSON </title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <Title order={1} align={"center"} mb={18}>
        Arquivos
      </Title>
      <Text align={"center"} mb={18}>
      Faça upload do seu arquivo Figma e obtenha a representação JSON dele
      </Text>
      <Container>
        {json && (
          <Box mb={24}>
            <Container style={{ display: "flex", justifyContent: "center" }} mb={10}>
              <Button onClick={handleDownloadJSON}>Download JSON</Button>
              <Button ml={8} variant='outline' onClick={handleExportFig}>
                Exportar .fig
              </Button>
            </Container>
            <ReactJson
              style={{ minHeight: 300, borderRadius: 10 }}
              src={json}
              onAdd={(edit) => {
                setJson(edit.updated_src)
              }}
              onEdit={(edit) => {
                setJson(edit.updated_src)
              }}
              onDelete={(edit) => {
                setJson(edit.updated_src)
              }}
              collapsed={true}
              theme={colorScheme === "dark" ? "twilight" : "shapeshifter:inverted"}
              // displayDataTypes={false}
            />
          </Box>
        )}
        <FileUpload
          onDrop={async (files) => {
            const file = files[0]
            setFileName(file.name)
            const buffer = await file.arrayBuffer()
            let json
            if (file.name.endsWith(".fig")) {
              json = figToJson(buffer)
            } else if (file.name.endsWith(".json")) {
              json = JSON.parse(new TextDecoder().decode(buffer))
            } else {
              throw new Error("File must be .fig or .json")
            }
            setJson(json)
          }}
        />
      </Container>

    </Container>
  )
}

export default Home
